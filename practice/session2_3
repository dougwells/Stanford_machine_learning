octave:25> whos
Variables in the current scope:

   Attr Name        Size                     Bytes  Class
   ==== ====        ====                     =====  ===== 
        A           4x4                        128  double
        a           1x4                         32  double
        ans         2x4                         64  double
        b           4x1                         32  double
        x           1x4                         32  double

Total is 36 elements using 288 bytes

octave:26> help rand
warning: help: Texinfo formatting filter exited abnormally; raw Texinfo source of help text follows...

'rand' is a built-in function from the file libinterp/corefcn/rand.cc

 -- Built-in Function:  rand (N)
 -- Built-in Function:  rand (N, M, ...)
 -- Built-in Function:  rand ([N M ...])
 -- Built-in Function: V = rand ("state")
 -- Built-in Function:  rand ("state", V)
 -- Built-in Function:  rand ("state", "reset")
 -- Built-in Function: V = rand ("seed")
 -- Built-in Function:  rand ("seed", V)
 -- Built-in Function:  rand ("seed", "reset")
 -- Built-in Function:  rand (..., "single")
 -- Built-in Function:  rand (..., "double")
     Return a matrix with random elements uniformly distributed on the
     interval (0, 1).  The arguments are handled the same as the
     arguments for `eye'.

     You can query the state of the random number generator using the
     form

          v = rand ("state")

     This returns a column vector V of length 625.  Later, you can
     restore the random number generator to the state V using the form

          rand ("state", v)

     You may also initialize the state vector from an arbitrary vector
     of length  625 for V.  This new state will be a hash based on the
     value of V, not V itself.

     By default, the generator is initialized from `/dev/urandom' if it
     is available, otherwise from CPU time, wall clock time, and the
     current fraction of a second.  Note that this differs from MATLAB,
     which always initializes the state to the same state at startup.
     To obtain behavior comparable to MATLAB, initialize with a
     deterministic state vector in Octave's startup files (*note
     Startup Files::).

     To compute the pseudo-random sequence, `rand' uses the Mersenne
     Twister with a period of 2^19937-1 (See M. Matsumoto and T.
     Nishimura, `Mersenne Twister: A 623-dimensionally equidistributed
     uniform pseudorandom number generator', ACM Trans. on Modeling and
     Computer Simulation Vol. 8, No. 1, pp. 3-30, January 1998,
     `http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html').  Do
     *not* use for cryptography without securely hashing several
     returned values together, otherwise the generator state can be
     learned after reading 624 consecutive values.

     Older versions of Octave used a different random number generator.
     The new generator is used by default as it is significantly faster
     than the old generator, and produces random numbers with a
     significantly longer cycle time.  However, in some circumstances
     it might be desirable to obtain the same random sequences as used
     by the old generators.  To do this the keyword "seed" is used to
     specify that the old generators should be use, as in

          rand ("seed", val)

     which sets the seed of the generator to VAL.  The seed of the
     generator can be queried with

          s = rand ("seed")

     However, it should be noted that querying the seed will not cause
     `rand' to use the old generators, only setting the seed will.  To
     cause `rand' to once again use the new generators, the keyword
     "state" should be used to reset the state of the `rand'.

     The state or seed of the generator can be reset to a new random
     value using the "reset" keyword.

     The class of the value returned can be controlled by a trailing
     "double" or "single" argument.  These are the only valid classes.

     See also: randn, rande, randg, randp.



Additional help for built-in functions and operators is
available in the online version of the manual.  Use the command
'doc <topic>' to search the manual index.

Help and information about Octave is also available on the WWW
at http://www.octave.org and via the help@octave.org
mailing list.
octave:27> help randN
error: help: 'randN' not found
octave:27> help randn
'randn' is a built-in function from the file libinterp/corefcn/rand.cc

 -- Built-in Function:  randn (N)
 -- Built-in Function:  randn (N, M, ...)
 -- Built-in Function:  randn ([N M ...])
 -- Built-in Function: V = randn ("state")
 -- Built-in Function:  randn ("state", V)
 -- Built-in Function:  randn ("state", "reset")
 -- Built-in Function: V = randn ("seed")
 -- Built-in Function:  randn ("seed", V)
 -- Built-in Function:  randn ("seed", "reset")
 -- Built-in Function:  randn (..., "single")
 -- Built-in Function:  randn (..., "double")
     Return a matrix with normally distributed random elements having
     zero mean and variance one.  The arguments are handled the same as
     the arguments for `rand'.

     By default, `randn' uses the Marsaglia and Tsang "Ziggurat
     technique" to transform from a uniform to a normal distribution.

     The class of the value returned can be controlled by a trailing
     "double" or "single" argument.  These are the only valid classes.

     Reference: G. Marsaglia and W.W. Tsang, `Ziggurat Method for
     Generating Random Variables', J. Statistical Software, vol 5, 2000,
     `http://www.jstatsoft.org/v05/i08/')

     See also: rand, rande, randg, randp.



Additional help for built-in functions and operators is
available in the online version of the manual.  Use the command
'doc <topic>' to search the manual index.

Help and information about Octave is also available on the WWW
at http://www.octave.org and via the help@octave.org
mailing list.
octave:28> rand(2,2)
ans =

   0.14916   0.64564
   0.94927   0.54377

octave:29> randi([0,100],2)
ans =

    9   96
    1   52

octave:30> max(max(A))
ans =  9
octave:31> A
A =

   2   9   0   0
   0   4   1   4
   7   5   5   1
   7   8   7   4

octave:32> min(min(A))
ans = 0
octave:33> b
b =

  -1
   6
   0
   9

octave:34> sort(b)
ans =

  -1
   0
   6
   9

octave:35> diary session2_3
octave:36> pwd
ans = /Users/dougwells/Dropbox/1-Code/Machine-Learning
octave:37> ls
ex1		sec2_2		session2_3
practice	session2_2
octave:38> cd practice
octave:39> diary plotting_practice
